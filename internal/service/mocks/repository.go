// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/distuurbia/firstTask/internal/model"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, pers
func (_m *Repository) Create(ctx context.Context, pers *model.Person) error {
	ret := _m.Called(ctx, pers)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Person) error); ok {
		r0 = rf(ctx, pers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Repository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadRow provides a mock function with given fields: ctx, id
func (_m *Repository) ReadRow(ctx context.Context, id uuid.UUID) (*model.Person, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Person
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Person, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Person); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Person)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, pers
func (_m *Repository) Update(ctx context.Context, pers *model.Person) error {
	ret := _m.Called(ctx, pers)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Person) error); ok {
		r0 = rf(ctx, pers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
